#!/bin/sh
# runit-inspired, minimalist init system
# Usage: ./$0 [-s | --source-only]
#   -s, --source-only allow POSIX shell sourcing: don't start the core
CONFIG_DIR=. # /etc/service-core # configuration directory
CONFIG_FILE="$CONFIG_DIR/config" # configuration file
WD=. # /var/service-core # working directory
ALIVE=1 # global halt trigger
CONFIG_DIR="$WD/config" # configuration directory
ENABLED_DIR="$WD/enabled" # directory for enabled services
HOLD_FILE=hold # hold file for a service (its presence disables the service)
LOG_DATE_FORMAT="%Y-%m-%d %H.%M.%S" # date format for logs
LOG_DIR=log # logging directory
LOG_FILE="$LOG_DIR/current" # current log file
OUT_FILE=out # service output
PID_FILE=pid # PID file
POST_BOOT_D_DIR="$WD/post-boot.d" # post-boot scripts directory
PRE_HALT_D_DIR="$WD/pre-halt.d" # pre-halt scripts directory
RUN_FILE=run # service entry point
SHELL=sh # shell used to run a service's entry point
SIG=TERM # signal for terminating a service
SLEEP=1 # sleep value
STATE_DIR="$WD/state" # directory for core state information (PIDs, etc.)
STATE_ENABLED_DIR="$STATE_DIR/enabled" # state directory for enabled services

# grab configurable globals

if ! . `realpath "$CONFIG_FILE"` > /dev/null 2>&1
then
  echo "Failed to include \"$CONFIG_FILE\"; using defaults."
fi

# get a service's PID
get_service_pid() {
  PID=`cat "$STATE_ENABLED_DIR/$1/$PID_FILE" 2>&1`
  
  if [ $? != "0" ]
  then
    return 0
  fi
  return $PID > /dev/null 2>&1
  
  # invalid PID
  
  return 0
}

# place a service on hold
hold_service() {
  if [ -z "$1" ]
  then
    return 1
  fi
  touch "$ENABLED_DIR/$1/$HOLD_FILE"
  return $?
}

# check whether a service is running
is_running() {
  get_service_pid "$1"
  PID=$?
  
  if [ $PID = "0" ]
  then
    return 1
  fi
  
  if [ ! -z `pgrep -f "$ENABLED_DIR/$1/$RUN_FILE" | grep "^$PID\$"` ]
  then
    return 0
  fi
  return 1
}

# log service information to the global log file and STDOUT
# of the format "DATE [CLASS_SPEC] MESSAGE"
log() {
  CLASS_SPEC="\"$1\""
  
  if [ -z "$1" ]
  then
    CLASS_SPEC=service-core
  fi
  echo `date` "[$CLASS_SPEC]" "$2" | tee -a "$LOG_FILE"
}

# maintain enabled services
maintain_services() {
  while [ $ALIVE ]
  do
    # restart/stop old services
    
    for OLD_SERVICE in $(ls "$STATE_ENABLED_DIR")
    do
      SERVICE_DIR="$ENABLED_DIR/$OLD_SERVICE"
      
      if [ ! -e "$SERVICE_DIR" ] || [ -e "$SERVICE_DIR/$HOLD_FILE" ]
      then
        stop_service "$OLD_SERVICE"
      else
        start_service "$OLD_SERVICE" # restart as needed
      fi
    done
    
    # start new services
    
    for SERVICE in $(ls "$ENABLED_DIR")
    do
      start_service "$SERVICE"
    done
    sleep "$SLEEP"
  done
}

# boot the init system
on_boot() {
  log "" "Entering post-boot phase."
  run_scripts_in_order "$POST_BOOT_D_DIR"
}

# halt the init system
on_halt() {
  ALIVE=0 # global halt order
  
  log "" "Received terminating signal."
  log "" "Entering pre-halt phase."

  sleep "$SLEEP" # wait for the maintenance function to terminate

  for ENABLED in $(ls "$STATE_ENABLED_DIR")
  do
    stop_service "$ENABLED"
  done
  run_scripts_in_order "$PRE_HALT_D_DIR"
  
  # migrate the log file
  
  mv -f "$LOG_FILE" "$LOG_DIR/`date \"+$LOG_DATE_FORMAT\"`"
  
  # finally, remove the core PID file

  rm -f "$STATE_DIR/$PID_FILE"
  exit 0
}

# run scripts within a directory in sorted (using `sort -h`) order
run_scripts_in_order() {
  if [ ! -d "$1" ]
  then
    log "" "Invalid script directory."
    return 1
  fi
  
  for SCRIPT in $(ls "$1" | sort -h)
  do
    SCRIPT="$1/$SCRIPT"
    log "" "Executing \"$SCRIPT\"..."
    sh "$SCRIPT"
  done
  log "" "Done executing scripts."
}

# sanitize variables
_sanitize_variables() {
  return # not implemented
}

# set a service's PID
set_service_pid() {
  if [ -z "$1" ]
  then
    return 1
  fi
  SERVICE_STATE_DIR="$STATE_ENABLED_DIR/$1"

  if [ ! -e "$SERVICE_STATE_DIR" ]
  then
    mkdir -p "$SERVICE_STATE_DIR"
    RETVAL=$?
    
    if [ ! $RETVAL ]
    then
      return $RETVAL
    fi
  fi
  echo "$2" > "$SERVICE_STATE_DIR/$PID_FILE"
  return $?
}

# start a service and return its PID, or 0 on failure
start_service() {
  SERVICE_DIR="$ENABLED_DIR/$1"
  SERVICE_RUN_FILE="$SERVICE_DIR/$RUN_FILE"
  
  # check for a hold on the service
  
  if [ -e "$SERVICE_DIR/$HOLD_FILE" ]
  then
    return 0
  fi
  
  # check for an entry point
  
  if [ ! -e "$SERVICE_RUN_FILE" ]
  then
    return 0
  fi
  
  # check whether the service is already running
  
  if is_running "$1"
  then
    get_service_pid "$1"
    return $?
  fi
  
  # not running
  
  "$SHELL" "$SERVICE_RUN_FILE" > "$SERVICE_DIR/$OUT_FILE" 2>&1 &
  PID=$!
  
  if [ $PID != "0" ]
  then
    set_service_pid "$1" $PID
    log "$1" "Started service at PID $PID."
  else
    log "$1" "Failed to start service."
  fi
  return $PID
}

# stop a service
stop_service() {
  # check whether the service is running
   
  if ! is_running "$1"
  then
    return 0
  fi
  
  # get the PID
  
  get_service_pid "$1"
  PID=$?
  
  if [ $PID = "0" ]
  then
    return 0
  fi
  
  # stop the service
  
  kill -s "$SIG" "$PID"
  RETVAL=$?
  
  if [ $RETVAL = "0" ]
  then
    unset_service_pid "$1"
    log "$1" "Stopped service with $SIG."
  else
    log "$1" "Failed to stop service with $SIG."
  fi
  return $RETVAL
}

# strip the preceding line from a string
_strip_preceding_line() {
  echo "$1" | cut --complement -d "
" -f 1
}

# lift the hold from a service
unhold_service() {
  if [ -z "$1" ]
  then
    return 1
  fi
  rm -f "$ENABLED_DIR/$1/$HOLD_FILE"
  return $?
}

# unset a service's PID
unset_service_pid() {
  if [ -z "$1" ]
  then
    return 1
  fi
  SERVICE_STATE_DIR="$STATE_ENABLED_DIR/$1"
  rm "$SERVICE_STATE_DIR/$PID_FILE" > /dev/null 2>&1
  RETVAL=$?

  if [ -d "$SERVICE_STATE_DIR/" ] && [ `ls -a "$SERVICE_STATE_DIR" | wc -w` = "2" ]
  then
    rmdir "$SERVICE_STATE_DIR"
    return $?
  fi
  return $RETVAL
}

# sanitize variables (this must be done, even in the source-only option)

_sanitize_variables

# check for source-only option

if [ "$1" = "-s" ] || [ "$1" = "--source-only" ]
then
  return 1
fi

# create directories

for DIR in "$CONFIG_DIR" "$WD" "$ENABLED_DIR" "$LOG_DIR" "$POST_BOOT_D_DIR" "$PRE_HALT_D_DIR" "$STATE_DIR" "$STATE_ENABLED_DIR"
do
  if [ ! -e "$DIR" ]
  then
    if ! mkdir -p "$DIR"
    then
      log "" "Failed to create \"$DIR\"." > /dev/null 2>&1
      echo "Failed to create \"$DIR\"."
      exit 1
    fi
  elif [ ! -d "$DIR" ]
  then
    log "" "\"$DIR\" exists, and isn't a directory." > /dev/null 2>&1
    echo "\"$DIR\" exists, and isn't a directory."
    exit 1
  fi
done

# clear global log

> "$LOG_FILE"

# prep eventual halt

trap on_halt ABRT HUP INT TERM

# set the core PID file

echo $$ > "$STATE_DIR/$PID_FILE"

# 3-stage system

on_boot
maintain_services
on_halt # should be unreachable

