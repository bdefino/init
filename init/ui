#/bin/sh
# `init` user interface
COMMAND="$1"
USAGE="Usage: ./$0 COMMAND SERVICE
COMMAND
	restart
		stop, then start SERVICE
	start
		lift a persistent hold from SERVICE
	status
		print the status of SERVICE
	stop
		place a persistent hold on SERVICE
SERVICE
	the service name"
WD=.
ENABLED_DIR="$WD/enabled"
HOLD_FILE=hold
OUT_FILE=out
PID_FILE=pid
RUN_FILE=run
SERVICE="$2"
SERVICE_DIR="$ENABLED_DIR/$SERVICE"
SERVICE_HOLD_FILE="$SERVICE_DIR/$HOLD_FILE"
SERVICE_OUT_FILE="$SERVICE_DIR/$OUT_FILE"
SERVICE_PID_FILE="$SERVICE_DIR/$PID_FILE"
SHELL=`cat "$WD/shell" 2>&1`

# get a service's PID
get_service_pid() {
  PID=`cat "$ENABLED_DIR/$1/$PID_FILE" 2>&1`
  
  if [ $? != "0" ]
  then
    # no PID file
    return 0
  fi
  return $PID > /dev/null 2>&1
  return 0 # invalid PID
}

# check whether a service is running
is_running() {
  get_service_pid "$1"
  PID=$?
  
  if [ $PID = "0" ]
  then
    return 1
  fi
  
  if [ ! -z `pgrep -f "$ENABLED_DIR/$1/$RUN_FILE" | grep "^$PID\$"` ]
  then
    return 0
  fi
  return 1
}

if [ $? != "0" ]
then
  # use default value
  
  SHELL=sh
fi
SIG=`cat "$WD/sig" 2>&1`

if [ $? != "0" ]
then
  # use default value
  
  SIG=TERM
fi
SLEEP=`cat "$WD/sleep" 2>&1`

if [ $? != "0" ]
then
  # use default value
  
  SLEEP=1
fi

if [ ! -e "$SERVICE_DIR" ]
then
  echo "Unrecognized service." >&2
  exit 1
elif [ ! -d "$SERVICE_DIR" ]
then
  echo "Not a service directory." >&2
  exit 1
fi

case "$COMMAND"
in
  restart)
    touch "$SERVICE_HOLD_FILE"
    
    # wait for the PID file to disappear
    
    while [ -e "$SERVICE_PID_FILE" ]
    do
      sleep "$SLEEP";
    done
    rm "$SERVICE_HOLD_FILE"
    
    # wait for the PID file to reappear
    
    while [ ! -e "$SERVICE_PID_FILE" ]
    do
      sleep "$SLEEP";
    done
    echo "Service \"$SERVICE\" to be restarted."
    ;;
  "start")
    rm "$SERVICE_HOLD_FILE" > /dev/null 2>&1
    
    # wait for the PID file to appear
    
    while [ ! -e "$SERVICE_PID_FILE" ]
    do
      sleep "$SLEEP"
    done
    echo "Service \"$SERVICE\" started."
    ;;
  "status")
      if is_running "$SERVICE"
      then
        echo "Service \"$SERVICE\" is running."
      elif [ -e "$SERVICE_HOLD_FILE" ]
      then
        echo "Service \"$SERVICE\" is stopped."
      else
        echo "Service \"$SERVICE\" crashed."
      fi
    ;;
  "stop")
    touch "$SERVICE_HOLD_FILE"
    
    # wait for the PID file to disappear

    while [ -e "$SERVICE_PID_FILE" ]
    do
      sleep "$SLEEP"
    done
    echo "Stopped service \"$SERVICE\"."
    ;;
  *)
    echo "Invalid command." >&2
    echo "$HELP"
    exit 1
esac
